// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique // Adresse du wallet principal de l'utilisateur
  privyUserId   String   @unique
  name          String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  managedWallets ManagedWallet[]
  pools          Pool[]
  transactions   Transaction[]

  @@map("users")
}

model ManagedWallet {
  id             String   @id @default(cuid())
  walletId       String   @unique 
  address        String   @unique 
  encryptedPrivateKey String // Clé privée chiffrée
  name           String?  
  isActive       Boolean  @default(true)
  userId         String
  lastBalance    String?
  lastSyncedAt   DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt


  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pools       Pool[]
  transactions Transaction[]

  @@map("managed_wallets")
}

model Pool {
  id              String   @id @default(cuid())
  name            String
  description     String?
  nftCollection   String   // Adresse du contrat NFT
  poolType        PoolType
  status          PoolStatus @default(ACTIVE)
  totalValue      Float    @default(0)
  userId          String
  managedWalletId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  managedWallet   ManagedWallet @relation(fields: [managedWalletId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@map("pools")
}

model Transaction {
  id              String        @id @default(cuid())
  txHash          String        @unique
  type            TransactionType
  amount          Float
  tokenAddress    String?       // Adresse du token (null pour ETH)
  nftTokenId      String?       // ID du NFT si applicable
  status          TransactionStatus @default(PENDING)
  userId          String
  managedWalletId String
  poolId          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  managedWallet   ManagedWallet @relation(fields: [managedWalletId], references: [id], onDelete: Cascade)
  pool            Pool?         @relation(fields: [poolId], references: [id])

  @@map("transactions")
}

enum PoolType {
  BUY
  SELL
  HOLD
  TRADE
}

enum PoolStatus {
  ACTIVE
  PAUSED
  CLOSED
}

enum TransactionType {
  BUY
  SELL
  TRANSFER
  DEPOSIT
  WITHDRAW
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
}
